{"ast":null,"code":"import { USER_LOGGED_IN } from './types';\nimport api from './api';\nimport jwt_decode from 'jwt-decode'; // export const userLoggedIn = (user) => ({\n//     type: USER_LOGGED_IN,\n//     user\n// })\n// export const login = (credentials) => (dispatch) => \n//     api.user.login(credentials).then(user =>    \n//         dispatch(userLoggedIn(user)));\n\nfunction handleAPIErrors(res) {\n  // this is needed to catch 404, 500 errors, etc.\n  if (!res.ok) {\n    throw Error(res.statusText);\n  }\n\n  return res;\n}\n\nexport function loggingIn() {\n  return {\n    type: 'LOGGING_IN'\n  };\n}\nexport function loginUser(credentials) {\n  return function (dispatch) {\n    dispatch(loggingIn());\n    var request = {\n      \"auth\": {\n        \"email\": credentials.email,\n        \"password\": credentials.password\n      }\n    };\n    var options = {\n      method: 'POST',\n      body: JSON.stringify(request),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //console.log(\"Login User!\",request);\n\n    fetch(\"api/user_token\", options).then(function (res) {\n      return handleAPIErrors(res);\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      localStorage.setItem(\"jwt\", res.jwt); // TODO: move to reducer?\n\n      var id = jwt_decode(res.jwt).sub;\n      dispatch({\n        type: \"LOGIN_USER\",\n        token: res.jwt,\n        id: id\n      });\n      dispatch(getUserPreferences(id));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}","map":{"version":3,"sources":["/home/learn/final-project/reading-challenge-client/src/actions/auth.js"],"names":["USER_LOGGED_IN","api","jwt_decode","handleAPIErrors","res","ok","Error","statusText","loggingIn","type","loginUser","credentials","dispatch","request","email","password","options","method","body","JSON","stringify","headers","fetch","then","json","localStorage","setItem","jwt","id","sub","token","getUserPreferences","catch","error","console","log"],"mappings":"AAAA,SAASA,cAAT,QAA+B,SAA/B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B;AACA,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,UAAMC,KAAK,CAACF,GAAG,CAACG,UAAL,CAAX;AACH;;AACD,SAAOH,GAAP;AACH;;AAED,OAAO,SAASI,SAAT,GAAqB;AACxB,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGD;AAEH,OAAO,SAASC,SAAT,CAAmBC,WAAnB,EAAgC;AACnC,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACJ,SAAS,EAAV,CAAR;AAEA,QAAMK,OAAO,GAAG;AAAC,cAAQ;AAAC,iBAASF,WAAW,CAACG,KAAtB;AAA6B,oBAAYH,WAAW,CAACI;AAArD;AAAT,KAAhB;AACA,QAAMC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAFM;AAGZQ,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHG,KAAhB,CAJiB,CAWjB;;AACAC,IAAAA,KAAK,CAAC,gBAAD,EAAmBN,OAAnB,CAAL,CACKO,IADL,CACU,UAAAnB,GAAG;AAAA,aAAID,eAAe,CAACC,GAAD,CAAnB;AAAA,KADb,EAEKmB,IAFL,CAEU,UAAAnB,GAAG;AAAA,aAAIA,GAAG,CAACoB,IAAJ,EAAJ;AAAA,KAFb,EAGKD,IAHL,CAGU,UAAAnB,GAAG,EAAI;AACTqB,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BtB,GAAG,CAACuB,GAAhC,EADS,CAC6B;;AACtC,UAAIC,EAAE,GAAG1B,UAAU,CAACE,GAAG,CAACuB,GAAL,CAAV,CAAoBE,GAA7B;AACAjB,MAAAA,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAC,YAAN;AAAoBqB,QAAAA,KAAK,EAAC1B,GAAG,CAACuB,GAA9B;AAAmCC,QAAAA,EAAE,EAAEA;AAAvC,OAAD,CAAR;AACAhB,MAAAA,QAAQ,CAACmB,kBAAkB,CAACH,EAAD,CAAnB,CAAR;AACH,KARL,EASKI,KATL,CASW,UAASC,KAAT,EAAgB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAXL;AAYH,GAxBD;AAyBH","sourcesContent":["import { USER_LOGGED_IN } from './types';\nimport api from './api';\nimport jwt_decode from 'jwt-decode';\n\n// export const userLoggedIn = (user) => ({\n//     type: USER_LOGGED_IN,\n//     user\n// })\n// export const login = (credentials) => (dispatch) => \n//     api.user.login(credentials).then(user =>    \n//         dispatch(userLoggedIn(user)));\n\nfunction handleAPIErrors(res) {\n    // this is needed to catch 404, 500 errors, etc.\n    if (!res.ok) {\n        throw Error(res.statusText);\n    }\n    return res;   \n}\n\nexport function loggingIn() {\n    return {\n        type: 'LOGGING_IN'\n    };\n  }\n  \nexport function loginUser(credentials) {\n    return (dispatch) => {\n        dispatch(loggingIn());\n\n        const request = {\"auth\": {\"email\": credentials.email, \"password\": credentials.password}}\n        const options = {\n            method: 'POST',\n            body: JSON.stringify(request),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n        };\n        //console.log(\"Login User!\",request);\n        fetch(\"api/user_token\", options)\n            .then(res => handleAPIErrors(res))        \n            .then(res => res.json())\n            .then(res => {\n                localStorage.setItem(\"jwt\", res.jwt); // TODO: move to reducer?\n                let id = jwt_decode(res.jwt).sub;                \n                dispatch({type:\"LOGIN_USER\", token:res.jwt, id: id})\n                dispatch(getUserPreferences(id))               \n            })\n            .catch(function(error) {\n                console.log(error);\n            });             \n    };\n}"]},"metadata":{},"sourceType":"module"}