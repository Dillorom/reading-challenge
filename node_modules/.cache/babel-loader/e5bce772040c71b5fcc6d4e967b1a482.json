{"ast":null,"code":"var API_URL = process.env.REACT_APP_API_URL;\nexport var setGoal = function setGoal(goal) {\n  return {\n    type: \"SET_GOAL\",\n    goal: goal\n  };\n}; // export const deleteBook = bookId => {\n//   return (dispatch) => {\n//     dispatch({type: 'DELETE_BOOK'});\n//     const request = {\n//     method: 'DELETE'\n//     }\n//       return fetch(`${API_URL}/books/${bookId}`, request)\n//         .then(response => {\n//           if (response.ok){\n//             const index = this.props.books.findIndex(book => book.id === bookId)  \n//             this.setState({\n//               books: [\n//                 ...this.props.books.slice(0, index),\n//                 ...this.props.books.slice(index + 1)\n//               ]\n//             })\n//           } else {\n//             window.alert(\"Unable to delete the book.\")\n//           }\n//         })\n//         .catch(err => console.log(\"Received this error while trying to delete a book:\", err))\n//       }\n// };\n// export const addBook = book => {\n//   return (dispatch) => {\n//     dispatch({type: \"ADD_BOOK\"});\n//     const request = {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             book: book\n//         }),\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     return fetch(`${API_URL}/books`, request)\n//         .then(response => response.json())\n//         .then(book => this.setState({\n//             books: this.props.books.concat(book)\n//           }))\n//   }\n// };\n// export const signup = user => {\n//   return(dispatch) => {\n//     dispatch({type: 'LOGIN'});\n//     const request = {\n//       method: 'GET',\n//       body: JSON.stringify({\n//           user: user\n//       }),\n//       headers: {\n//           'Content-Type': 'application/json'\n//       }\n//   };\n//     return fetch(`${API_URL}/users`, request)\n//     .then(response => response.json())\n//     .then(user => this.setState({\n//       users: this.props.users.concat(user)\n//     }))\n//   }\n// }\n// export const login = user => {\n//   return {\n//     type: 'LOGIN',\n//     user\n//   }\n// };","map":{"version":3,"sources":["/home/learn/final-project/reading-challenge-client/src/actions/index.js"],"names":["API_URL","process","env","REACT_APP_API_URL","setGoal","goal","type"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI,EAAI;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAE,UADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALI,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nexport const setGoal = goal => {\n    return {\n      type: \"SET_GOAL\",\n      goal\n    };\n  };\n\n// export const deleteBook = bookId => {\n//   return (dispatch) => {\n//     dispatch({type: 'DELETE_BOOK'});\n//     const request = {\n//     method: 'DELETE'\n//     }\n//       return fetch(`${API_URL}/books/${bookId}`, request)\n//         .then(response => {\n//           if (response.ok){\n//             const index = this.props.books.findIndex(book => book.id === bookId)  \n//             this.setState({\n//               books: [\n//                 ...this.props.books.slice(0, index),\n//                 ...this.props.books.slice(index + 1)\n//               ]\n//             })\n//           } else {\n//             window.alert(\"Unable to delete the book.\")\n//           }\n//         })\n//         .catch(err => console.log(\"Received this error while trying to delete a book:\", err))\n//       }\n// };\n\n// export const addBook = book => {\n//   return (dispatch) => {\n//     dispatch({type: \"ADD_BOOK\"});\n//     const request = {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             book: book\n//         }),\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     return fetch(`${API_URL}/books`, request)\n//         .then(response => response.json())\n//         .then(book => this.setState({\n//             books: this.props.books.concat(book)\n//           }))\n//   }\n// };\n\n// export const signup = user => {\n//   return(dispatch) => {\n//     dispatch({type: 'LOGIN'});\n//     const request = {\n//       method: 'GET',\n//       body: JSON.stringify({\n//           user: user\n//       }),\n//       headers: {\n//           'Content-Type': 'application/json'\n//       }\n//   };\n//     return fetch(`${API_URL}/users`, request)\n//     .then(response => response.json())\n//     .then(user => this.setState({\n//       users: this.props.users.concat(user)\n//     }))\n//   }\n// }\n\n// export const login = user => {\n//   return {\n//     type: 'LOGIN',\n//     user\n\n//   }\n// };"]},"metadata":{},"sourceType":"module"}