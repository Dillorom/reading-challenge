{"ast":null,"code":"var API_URL = process.env.REACT_APP_API_URL;\nexport var setGoal = function setGoal(goal) {\n  return {\n    type: \"SET_GOAL\",\n    goal: goal\n  };\n}; // export const likeCounter = (id) => {\n//   //debugger\n//   return {\n//     type: 'INCREMENT_LIKE_COUNTER',\n//     payload: id\n//   }\n//  }\n\nexport var likeCounter = function likeCounter(bookId) {\n  //debugger\n  var data = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bookId)\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books\"), data).then(function (response) {\n      return response.json();\n    }).then(function (book) {\n      return console.log(book.likes);\n    }).then(function (book) {\n      return dispatch({\n        type: 'INCREMENT_LIKE_COUNTER',\n        payload: bookId\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var viewBook = function viewBook(payload) {\n  return {\n    type: 'VIEW_BOOK',\n    payload: payload\n  };\n};\nexport var fetchBooks = function fetchBooks() {\n  var data = {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json' //'Authorization': sessionStorage.jwt\n\n    }\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books\"), data).then(function (response) {\n      return response.json();\n    }).then(function (books) {\n      dispatch({\n        type: 'FETCH_BOOKS',\n        payload: books\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var addBook = function addBook(book) {\n  var data = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(book)\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books\"), data).then(function (response) {\n      return response.json();\n    }).then(function (book) {\n      return dispatch({\n        type: 'ADD_BOOK',\n        payload: book\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var deleteBook = function deleteBook(id) {\n  var data = {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books/\").concat(id), data).then(function (response) {\n      return response.json();\n    }).then(function (book) {\n      return dispatch({\n        type: 'DELETE_BOOK',\n        payload: book\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var login = function login(user) {\n  return {\n    type: 'LOGIN',\n    user: user\n  };\n};","map":{"version":3,"sources":["/home/learn/final-project/reading-challenge-client/src/actions/index.js"],"names":["API_URL","process","env","REACT_APP_API_URL","setGoal","goal","type","likeCounter","bookId","data","method","headers","body","JSON","stringify","dispatch","fetch","then","response","json","book","console","log","likes","payload","catch","err","viewBook","fetchBooks","books","addBook","deleteBook","id","login","user"],"mappings":"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","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nexport const setGoal = goal => {\n    return {\n      type: \"SET_GOAL\",\n      goal\n    };\n  };\n  \n  // export const likeCounter = (id) => {\n  //   //debugger\n  //   return {\n  //     type: 'INCREMENT_LIKE_COUNTER',\n  //     payload: id\n  //   }\n  //  }\n\n  \n  export const likeCounter = (bookId) => {\n    //debugger\n    let data = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookId)\n    }\n\n    return dispatch => {\n      fetch(`${ API_URL }/books`, data)\n        .then(response => response.json())\n        .then(book => console.log(book.likes))\n        .then( book => dispatch({\n          type: 'INCREMENT_LIKE_COUNTER',\n          payload: bookId\n        }))\n        .catch(err => err)\n     }\n  }\n   \n\n  export const viewBook = (payload) => {\n    return {\n      type: 'VIEW_BOOK',\n      payload\n    }\n  }\n\n  export const fetchBooks = () => {\n    let data = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        //'Authorization': sessionStorage.jwt\n      }\n    }\n\n    return dispatch => {\n      fetch(`${ API_URL }/books`, data)\n        .then(response => response.json())\n        .then(books => {\n          dispatch({\n              type: 'FETCH_BOOKS',\n              payload: books\n          })\n        })\n        .catch(err => err)\n    }\n  }\n  \n  export const addBook = book => {\n    let data = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(book)\n    }\n  \n    return dispatch => {\n      fetch(`${ API_URL }/books`, data)\n        .then(response => response.json())\n        .then(book => dispatch({\n          type: 'ADD_BOOK',\n          payload: book\n        }))\n        .catch(err => err)\n    }\n  }\n  \n  export const deleteBook = id => {\n    let data = {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  \n    return dispatch => {\n      fetch(`${ API_URL }/books/${ id }`, data)\n        .then(response => response.json())\n        .then(book => dispatch({\n          type: 'DELETE_BOOK',\n          payload: book\n        }))\n        .catch(err => err)\n    }\n  }\n\nexport const login = user => {\n  return {\n    type: 'LOGIN',\n    user\n\n  }\n};\n"]},"metadata":{},"sourceType":"module"}