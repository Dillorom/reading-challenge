{"ast":null,"code":"var API_URL = process.env.REACT_APP_API_URL;\nexport var setGoal = function setGoal(goal) {\n  return {\n    type: \"SET_GOAL\",\n    goal: goal\n  };\n};\nexport var fetchBooks = function fetchBooks() {\n  var data = {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json' //'Authorization': sessionStorage.jwt\n\n    }\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books\"), data).then(function (response) {\n      return response.json();\n    }).then(function (books) {\n      dispatch({\n        type: 'FETCH_BOOKS',\n        payload: books\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var createTodo = function createTodo(book) {\n  var data = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(book)\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books\"), data).then(function (response) {\n      return response.json();\n    }).then(function (book) {\n      return dispatch({\n        type: 'CREATE_BOOK',\n        payload: book\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n};\nexport var deleteTodo = function deleteTodo(id) {\n  var data = {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  return function (dispatch) {\n    fetch(\"\".concat(API_URL, \"/books/\").concat(id), data).then(function (response) {\n      return response.json();\n    }).then(function (book) {\n      return dispatch({\n        type: 'DELETE_BOOK',\n        payload: book\n      });\n    }).catch(function (err) {\n      return err;\n    });\n  };\n}; // export const deleteBook = bookId => {\n//   return (dispatch) => {\n//     dispatch({type: 'DELETE_BOOK'});\n//     const request = {\n//     method: 'DELETE'\n//     }\n//       return fetch(`${API_URL}/books/${bookId}`, request)\n//         .then(response => {\n//           if (response.ok){\n//             const index = this.props.books.findIndex(book => book.id === bookId)  \n//             this.setState({\n//               books: [\n//                 ...this.props.books.slice(0, index),\n//                 ...this.props.books.slice(index + 1)\n//               ]\n//             })\n//           } else {\n//             window.alert(\"Unable to delete the book.\")\n//           }\n//         })\n//         .catch(err => console.log(\"Received this error while trying to delete a book:\", err))\n//       }\n// };\n// export const addBook = book => {\n//   return (dispatch) => {\n//     dispatch({type: \"ADD_BOOK\"});\n//     const request = {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             book: book\n//         }),\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     return fetch(`${API_URL}/books`, request)\n//         .then(response => response.json())\n//         .then(book => this.setState({\n//             books: this.props.books.concat(book)\n//           }))\n//   }\n// };\n// export const signup = user => {\n//   return(dispatch) => {\n//     dispatch({type: 'LOGIN'});\n//     const request = {\n//       method: 'GET',\n//       body: JSON.stringify({\n//           user: user\n//       }),\n//       headers: {\n//           'Content-Type': 'application/json'\n//       }\n//   };\n//     return fetch(`${API_URL}/users`, request)\n//     .then(response => response.json())\n//     .then(user => this.setState({\n//       users: this.props.users.concat(user)\n//     }))\n//   }\n// }\n// export const login = user => {\n//   return {\n//     type: 'LOGIN',\n//     user\n//   }\n// };","map":{"version":3,"sources":["/home/learn/final-project/reading-challenge-client/src/actions/index.js"],"names":["API_URL","process","env","REACT_APP_API_URL","setGoal","goal","type","fetchBooks","data","method","headers","dispatch","fetch","then","response","json","books","payload","catch","err","createTodo","book","body","JSON","stringify","deleteTodo","id"],"mappings":"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","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nexport const setGoal = goal => {\n    return {\n      type: \"SET_GOAL\",\n      goal\n    };\n  };\n\n  export const fetchBooks = () => {\n    let data = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        //'Authorization': sessionStorage.jwt\n      }\n    }\n  \n    return dispatch => {\n      fetch(`${ API_URL }/books`, data)\n        .then(response => response.json())\n        .then(books => {\n          dispatch({\n              type: 'FETCH_BOOKS',\n              payload: books\n          })\n        })\n        .catch(err => err)\n    }\n  }\n  \n  export const createTodo = book => {\n    let data = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(book)\n    }\n  \n    return dispatch => {\n      fetch(`${ API_URL }/books`, data)\n        .then(response => response.json())\n        .then(book => dispatch({\n          type: 'CREATE_BOOK',\n          payload: book\n        }))\n        .catch(err => err)\n    }\n  }\n  \n  export const deleteTodo = id => {\n    let data = {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  \n    return dispatch => {\n      fetch(`${ API_URL }/books/${ id }`, data)\n        .then(response => response.json())\n        .then(book => dispatch({\n          type: 'DELETE_BOOK',\n          payload: book\n        }))\n        .catch(err => err)\n    }\n  }\n// export const deleteBook = bookId => {\n//   return (dispatch) => {\n//     dispatch({type: 'DELETE_BOOK'});\n//     const request = {\n//     method: 'DELETE'\n//     }\n//       return fetch(`${API_URL}/books/${bookId}`, request)\n//         .then(response => {\n//           if (response.ok){\n//             const index = this.props.books.findIndex(book => book.id === bookId)  \n//             this.setState({\n//               books: [\n//                 ...this.props.books.slice(0, index),\n//                 ...this.props.books.slice(index + 1)\n//               ]\n//             })\n//           } else {\n//             window.alert(\"Unable to delete the book.\")\n//           }\n//         })\n//         .catch(err => console.log(\"Received this error while trying to delete a book:\", err))\n//       }\n// };\n\n// export const addBook = book => {\n//   return (dispatch) => {\n//     dispatch({type: \"ADD_BOOK\"});\n//     const request = {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             book: book\n//         }),\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     return fetch(`${API_URL}/books`, request)\n//         .then(response => response.json())\n//         .then(book => this.setState({\n//             books: this.props.books.concat(book)\n//           }))\n//   }\n// };\n\n// export const signup = user => {\n//   return(dispatch) => {\n//     dispatch({type: 'LOGIN'});\n//     const request = {\n//       method: 'GET',\n//       body: JSON.stringify({\n//           user: user\n//       }),\n//       headers: {\n//           'Content-Type': 'application/json'\n//       }\n//   };\n//     return fetch(`${API_URL}/users`, request)\n//     .then(response => response.json())\n//     .then(user => this.setState({\n//       users: this.props.users.concat(user)\n//     }))\n//   }\n// }\n\n// export const login = user => {\n//   return {\n//     type: 'LOGIN',\n//     user\n\n//   }\n// };"]},"metadata":{},"sourceType":"module"}