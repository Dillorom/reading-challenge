{"ast":null,"code":"import _objectSpread from \"/home/learn/final-project/reading-challenge-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  books: []\n};\n\nvar manageBooks = function manageBooks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  //debugger\n  var index;\n  var likedBook;\n  var likedBookLikes;\n\n  switch (action.type) {\n    case 'FETCH_BOOKS':\n      return _objectSpread({}, state, {\n        books: action.payload\n      });\n\n    case \"ADD_BOOK\":\n      return _objectSpread({}, state, {\n        books: state.books.concat(action.payload)\n      });\n\n    case 'DELETE_BOOK':\n      return _objectSpread({}, state, {\n        books: state.books.filter(function (book) {\n          return book.id !== action.payload.id;\n        })\n      });\n\n    case \"INCREMENT_LIKE_COUNTER\":\n      index = state.books.findIndex(function (book) {\n        return book.id === action.payload.id;\n      }); //debugger\n\n      var updatedState = _objectSpread({}, state, {\n        books: state.books.map(function (book) {\n          if (book.id == action.payload.id) {\n            return _objectSpread({}, book, {\n              likes: book.likes + 1\n            });\n          } else {\n            return book;\n          }\n        })\n      });\n\n      debugger;\n    //return { ...state, books: (state.books[index] = action.payload) }\n    //return { ...state, books: state.books.map(book => book.id == action.payload.id)}\n    //return {...state, books: state.books[index] = action.payload}\n    //return {...state, books: state.books.filter(book => book.id == action.payload.id)}\n    //likedBook = state.books[index].likes+1;\n    // likedBookLikes = likedBook.likes\n    //debugger\n    // return { ...state, likedBookLikes: likedBookLikes + 1};\n    // let likedbook = action.payload.likes\n    // debugger\n    //debugger\n    //return { ...state, books: state.books};\n    //     return {\n    //       ...state.books.slice(0, index),\n    //       ...state, likedBookLikes: likedBookLikes + 1,\n    //       ...state.books.slice(index + 1)\n    // };\n    // case 'SORT_BY_LIKES':\n    //     return {...state, books: action.payload.sort(function (a, b) {\n    //       return b.likes - a.likes;\n    //     })};\n\n    default:\n      return state;\n  }\n};\n\nexport default manageBooks;","map":{"version":3,"sources":["/home/learn/final-project/reading-challenge-client/src/store/reducers/books.js"],"names":["initialState","books","manageBooks","state","action","index","likedBook","likedBookLikes","type","payload","concat","filter","book","id","findIndex","updatedState","map","likes"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACpD;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,cAAJ;;AAEE,UAAQH,MAAM,CAACI,IAAf;AACE,SAAK,aAAL;AACE,+BAAYL,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACK;AAAjC;;AACF,SAAK,UAAL;AACE,+BAAYN,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYS,MAAZ,CAAmBN,MAAM,CAACK,OAA1B;AAA1B;;AACF,SAAK,aAAL;AACE,+BAAWN,KAAX;AAAkBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYU,MAAZ,CAAmB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACK,OAAP,CAAeI,EAA/B;AAAA,SAAvB;AAAzB;;AACF,SAAK,wBAAL;AAEER,MAAAA,KAAK,GAAGF,KAAK,CAACF,KAAN,CAAYa,SAAZ,CAAsB,UAAAF,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACK,OAAP,CAAeI,EAA/B;AAAA,OAA1B,CAAR,CAFF,CAGE;;AACA,UAAME,YAAY,qBAAQZ,KAAR;AAAeF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYe,GAAZ,CAAgB,UAAAJ,IAAI,EAC1D;AAAC,cAAIA,IAAI,CAACC,EAAL,IAAWT,MAAM,CAACK,OAAP,CAAeI,EAA9B,EAAiC;AAChC,qCAAWD,IAAX;AAAiBK,cAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,GAAa;AAArC;AACA,WAFD,MAEO;AACL,mBAAOL,IAAP;AACD;AAAC,SALmC;AAAtB,QAAlB;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA;AACC;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AAEE,aAAOT,KAAP;AA3CJ;AA6CD,CAnDH;;AAoDE,eAAeD,WAAf","sourcesContent":["const initialState = {\n  books: [], \n  }\nconst manageBooks = (state = initialState, action) => {\n  //debugger\n  let index;\n  let likedBook;\n  let likedBookLikes;\n\n    switch (action.type) {\n      case 'FETCH_BOOKS':\n        return { ...state, books: action.payload }\n      case \"ADD_BOOK\":\n        return { ...state, books: state.books.concat(action.payload)}\n      case 'DELETE_BOOK':\n        return {...state, books: state.books.filter(book => book.id !== action.payload.id)}\n      case \"INCREMENT_LIKE_COUNTER\":    \n   \n        index = state.books.findIndex(book => book.id === action.payload.id); \n        //debugger\n        const updatedState = { ...state, books: state.books.map(book => \n          {if (book.id == action.payload.id){\n            return {...book, likes: book.likes + 1}\n           } else {\n             return book;\n           }}\n        )}\n        debugger\n        //return { ...state, books: (state.books[index] = action.payload) }\n        //return { ...state, books: state.books.map(book => book.id == action.payload.id)}\n        //return {...state, books: state.books[index] = action.payload}\n        //return {...state, books: state.books.filter(book => book.id == action.payload.id)}\n        //likedBook = state.books[index].likes+1;\n        // likedBookLikes = likedBook.likes\n        //debugger\n        // return { ...state, likedBookLikes: likedBookLikes + 1};\n        // let likedbook = action.payload.likes\n       // debugger\n       //debugger\n        //return { ...state, books: state.books};\n      \n    //     return {\n    //       ...state.books.slice(0, index),\n    //       ...state, likedBookLikes: likedBookLikes + 1,\n    //       ...state.books.slice(index + 1)\n    // };\n    // case 'SORT_BY_LIKES':\n    //     return {...state, books: action.payload.sort(function (a, b) {\n    //       return b.likes - a.likes;\n    //     })};\n      default:\n      \n        return state;\n    }\n  };\n  export default manageBooks;\n\n "]},"metadata":{},"sourceType":"module"}